# syntax=docker/dockerfile:1

FROM --platform=$BUILDPLATFORM rust:1.64 AS buildbase
WORKDIR /src
RUN <<EOT bash
    set -ex
    apt-get update    
    apt-get install -y \
        git \
        curl \
        clang
    rustup target add wasm32-wasi
EOT

FROM buildbase AS build
COPY Cargo.toml .
COPY src ./src 
RUN wget https://github.com/bytecodealliance/wasmtime/releases/download/v13.0.0/wasmtime-v13.0.0-x86_64-linux.tar.xz && tar -xvf wasmtime-v13.0.0-x86_64-linux.tar.xz \
    && cd wasmtime-v13.0.0-x86_64-linux && chmod +x wasmtime && cp wasmtime /usr/local/bin
# Build the Wasm binary
RUN cargo build --target wasm32-wasi --release

RUN wasmtime compile /src/target/wasm32-wasi/release/fibonacci.wasm -o /fibonacci.cwasm

# Use a minimal base image to reduce the final image size
FROM scratch

# Copy the compiled Wasm binary from the previous stage
COPY --link --from=build /fibonacci.cwasm /fibonacci.cwasm

# Set the entry point
ENTRYPOINT [ "/fibonacci.cwasm" ]


# docker build -f DockerfileCompile --target build -t test .
# docker run -it test /bin/sh